// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dtssdk/model/message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DTSSDK.Model {

  /// <summary>Holder for reflection information generated from dtssdk/model/message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for dtssdk/model/message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpkdHNzZGsvbW9kZWwvbWVzc2FnZS5wcm90bxIFbW9kZWwikAEKC0Rldmlj",
            "ZUV2ZW50EhEKCUNoYW5uZWxJRBgBIAEoBRIQCghEZXZpY2VJRBgCIAEoCRIR",
            "CglUaW1lc3RhbXAYAyABKAMSDAoETGluZRgEIAEoCRIkCglFdmVudFR5cGUY",
            "BSABKA4yES5tb2RlbC5GaWJlclN0YXRlEhUKDUNoYW5uZWxMZW5ndGgYBiAB",
            "KAIi9AEKC0RlZmVuY2Vab25lEgoKAklEGAEgASgFEhEKCUNoYW5uZWxJRBgC",
            "IAEoBRIQCghab25lTmFtZRgDIAEoCRINCgVTdGFydBgEIAEoAhIOCgZGaW5p",
            "c2gYBSABKAISCwoDVGFnGAYgASgJEioKCUFsYXJtVHlwZRgHIAEoDjIXLm1v",
            "ZGVsLkRlZmVuY2VBcmVhU3RhdGUSEAoIQWxhcm1Mb2MYCCABKAISFgoOTWF4",
            "VGVtcGVyYXR1cmUYCSABKAISFgoOTWluVGVtcGVyYXR1cmUYCiABKAISGgoS",
            "QXZlcmFnZVRlbXBlcmF0dXJlGAsgASgCIpABChBTZXREZXZpY2VSZXF1ZXN0",
            "EhwKFFpvbmVUZW1wTm90aWZ5RW5hYmxlGAEgASgIEh0KFVpvbmVBbGFybU5v",
            "dGlmeUVuYWJsZRgCIAEoCBIfChdGaWJlclN0YXR1c05vdGlmeUVuYWJsZRgD",
            "IAEoCBIeChZUZW1wU2lnbmFsTm90aWZ5RW5hYmxlGAQgASgIIjEKDlNldERl",
            "dmljZVJlcGx5Eg8KB1N1Y2Nlc3MYASABKAgSDgoGRXJyTXNnGAIgASgJIjgK",
            "FUdldERlZmVuY2Vab25lUmVxdWVzdBIPCgdDaGFubmVsGAEgASgFEg4KBlNl",
            "YXJjaBgCIAEoCSJYChNHZXREZWZlbmNlWm9uZVJlcGx5Eg8KB1N1Y2Nlc3MY",
            "ASABKAgSDgoGRXJyTXNnGAIgASgJEiAKBFJvd3MYAyADKAsyEi5tb2RlbC5E",
            "ZWZlbmNlWm9uZSIUChJHZXREZXZpY2VJRFJlcXVlc3QiRQoQR2V0RGV2aWNl",
            "SURSZXBseRIPCgdTdWNjZXNzGAEgASgIEg4KBkVyck1zZxgCIAEoCRIQCghE",
            "ZXZpY2VJRBgDIAEoCSJYCg5ab25lVGVtcE5vdGlmeRIQCghEZXZpY2VJRBgB",
            "IAEoCRIRCglUaW1lc3RhbXAYAiABKAMSIQoFWm9uZXMYAyADKAsyEi5tb2Rl",
            "bC5EZWZlbmNlWm9uZSJZCg9ab25lQWxhcm1Ob3RpZnkSEAoIRGV2aWNlSUQY",
            "ASABKAkSEQoJVGltZXN0YW1wGAIgASgDEiEKBVpvbmVzGAMgAygLMhIubW9k",
            "ZWwuRGVmZW5jZVpvbmUilgEKEURldmljZUV2ZW50Tm90aWZ5EhEKCUNoYW5u",
            "ZWxJRBgBIAEoBRIQCghEZXZpY2VJRBgCIAEoCRIRCglUaW1lc3RhbXAYAyAB",
            "KAMSDAoETGluZRgEIAEoCRIkCglFdmVudFR5cGUYBSABKA4yES5tb2RlbC5G",
            "aWJlclN0YXRlEhUKDUNoYW5uZWxMZW5ndGgYBiABKAIiaAoQVGVtcFNpZ25h",
            "bE5vdGlmeRIQCghEZXZpY2VJRBgBIAEoCRIMCgRMaW5lGAIgASgJEhEKCUNo",
            "YW5uZWxJRBgDIAEoBRIOCgZTaWduYWwYBCADKAISEQoJVGltZXN0YW1wGAUg",
            "ASgDIgsKCUhlYXJ0QmVhdCqwAgoFTXNnSUQSDQoJQ29ubmVjdElEEAASEAoM",
            "RGlzY29ubmVjdElEEAESGwoXR2V0RGVmZW5jZVpvbmVSZXF1ZXN0SUQQAhIZ",
            "ChVHZXREZWZlbmNlWm9uZVJlcGx5SUQQAxIWChJTZXREZXZpY2VSZXF1ZXN0",
            "SUQQBBIUChBTZXREZXZpY2VSZXBseUlEEAUSFAoQWm9uZVRlbXBOb3RpZnlJ",
            "RBAGEhUKEVpvbmVBbGFybU5vdGlmeUlEEAcSFwoTRGV2aWNlRXZlbnROb3Rp",
            "ZnlJRBAIEhYKElRlbXBTaWduYWxOb3RpZnlJRBAJEhgKFEdldERldmljZUlE",
            "UmVxdWVzdElEEAoSFgoSR2V0RGV2aWNlSURSZXBseUlEEAsSEAoLSGVhcnRC",
            "ZWF0SUQQ+gEqdQoQRGVmZW5jZUFyZWFTdGF0ZRIKCgZOb3JtYWwQABIOCgpX",
            "YXJuRGlmZmVyEAESCgoGV2FyblVwEAISDAoIV2FyblRlbXAQAxIPCgtBbGFy",
            "bURpZmZlchAEEgsKB0FsYXJtVXAQBRINCglBbGFybVRlbXAQBipuCgpGaWJl",
            "clN0YXRlEg4KClNTVEFURUlTT0sQABIQCgxTU1RBVFVTVU5GSU4QARIOCgpT",
            "U1RBVFVTRklOEAISDgoKU1NUQVRVU0JSSxADEg4KClNTVEFUVVNUTE8QBBIO",
            "CgpTU1RBVFVTTFRNEAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DTSSDK.Model.MsgID), typeof(global::DTSSDK.Model.DefenceAreaState), typeof(global::DTSSDK.Model.FiberState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.DeviceEvent), global::DTSSDK.Model.DeviceEvent.Parser, new[]{ "ChannelID", "DeviceID", "Timestamp", "Line", "EventType", "ChannelLength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.DefenceZone), global::DTSSDK.Model.DefenceZone.Parser, new[]{ "ID", "ChannelID", "ZoneName", "Start", "Finish", "Tag", "AlarmType", "AlarmLoc", "MaxTemperature", "MinTemperature", "AverageTemperature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.SetDeviceRequest), global::DTSSDK.Model.SetDeviceRequest.Parser, new[]{ "ZoneTempNotifyEnable", "ZoneAlarmNotifyEnable", "FiberStatusNotifyEnable", "TempSignalNotifyEnable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.SetDeviceReply), global::DTSSDK.Model.SetDeviceReply.Parser, new[]{ "Success", "ErrMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.GetDefenceZoneRequest), global::DTSSDK.Model.GetDefenceZoneRequest.Parser, new[]{ "Channel", "Search" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.GetDefenceZoneReply), global::DTSSDK.Model.GetDefenceZoneReply.Parser, new[]{ "Success", "ErrMsg", "Rows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.GetDeviceIDRequest), global::DTSSDK.Model.GetDeviceIDRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.GetDeviceIDReply), global::DTSSDK.Model.GetDeviceIDReply.Parser, new[]{ "Success", "ErrMsg", "DeviceID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.ZoneTempNotify), global::DTSSDK.Model.ZoneTempNotify.Parser, new[]{ "DeviceID", "Timestamp", "Zones" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.ZoneAlarmNotify), global::DTSSDK.Model.ZoneAlarmNotify.Parser, new[]{ "DeviceID", "Timestamp", "Zones" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.DeviceEventNotify), global::DTSSDK.Model.DeviceEventNotify.Parser, new[]{ "ChannelID", "DeviceID", "Timestamp", "Line", "EventType", "ChannelLength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.TempSignalNotify), global::DTSSDK.Model.TempSignalNotify.Parser, new[]{ "DeviceID", "Line", "ChannelID", "Signal", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTSSDK.Model.HeartBeat), global::DTSSDK.Model.HeartBeat.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgID {
    [pbr::OriginalName("ConnectID")] ConnectId = 0,
    [pbr::OriginalName("DisconnectID")] DisconnectId = 1,
    [pbr::OriginalName("GetDefenceZoneRequestID")] GetDefenceZoneRequestId = 2,
    [pbr::OriginalName("GetDefenceZoneReplyID")] GetDefenceZoneReplyId = 3,
    [pbr::OriginalName("SetDeviceRequestID")] SetDeviceRequestId = 4,
    [pbr::OriginalName("SetDeviceReplyID")] SetDeviceReplyId = 5,
    [pbr::OriginalName("ZoneTempNotifyID")] ZoneTempNotifyId = 6,
    [pbr::OriginalName("ZoneAlarmNotifyID")] ZoneAlarmNotifyId = 7,
    [pbr::OriginalName("DeviceEventNotifyID")] DeviceEventNotifyId = 8,
    [pbr::OriginalName("TempSignalNotifyID")] TempSignalNotifyId = 9,
    [pbr::OriginalName("GetDeviceIDRequestID")] GetDeviceIdrequestId = 10,
    [pbr::OriginalName("GetDeviceIDReplyID")] GetDeviceIdreplyId = 11,
    [pbr::OriginalName("HeartBeatID")] HeartBeatId = 250,
  }

  /// <summary>
  ///防区状态
  /// </summary>
  public enum DefenceAreaState {
    /// <summary>
    ///正常
    /// </summary>
    [pbr::OriginalName("Normal")] Normal = 0,
    /// <summary>
    ///温差预警
    /// </summary>
    [pbr::OriginalName("WarnDiffer")] WarnDiffer = 1,
    /// <summary>
    ///温升预警
    /// </summary>
    [pbr::OriginalName("WarnUp")] WarnUp = 2,
    /// <summary>
    ///定温预警
    /// </summary>
    [pbr::OriginalName("WarnTemp")] WarnTemp = 3,
    /// <summary>
    ///温差警报
    /// </summary>
    [pbr::OriginalName("AlarmDiffer")] AlarmDiffer = 4,
    /// <summary>
    ///温升警报
    /// </summary>
    [pbr::OriginalName("AlarmUp")] AlarmUp = 5,
    /// <summary>
    ///定温警报
    /// </summary>
    [pbr::OriginalName("AlarmTemp")] AlarmTemp = 6,
  }

  /// <summary>
  ///防区状态
  /// </summary>
  public enum FiberState {
    /// <summary>
    ///光纤正常
    /// </summary>
    [pbr::OriginalName("SSTATEISOK")] Sstateisok = 0,
    /// <summary>
    ///光纤拔出
    /// </summary>
    [pbr::OriginalName("SSTATUSUNFIN")] Sstatusunfin = 1,
    /// <summary>
    ///光纤插入
    /// </summary>
    [pbr::OriginalName("SSTATUSFIN")] Sstatusfin = 2,
    /// <summary>
    ///光纤断裂
    /// </summary>
    [pbr::OriginalName("SSTATUSBRK")] Sstatusbrk = 3,
    /// <summary>
    ///光纤过长
    /// </summary>
    [pbr::OriginalName("SSTATUSTLO")] Sstatustlo = 4,
    /// <summary>
    ///光纤损耗过多
    /// </summary>
    [pbr::OriginalName("SSTATUSLTM")] Sstatusltm = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///设备
  /// </summary>
  public sealed partial class DeviceEvent : pb::IMessage<DeviceEvent> {
    private static readonly pb::MessageParser<DeviceEvent> _parser = new pb::MessageParser<DeviceEvent>(() => new DeviceEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceEvent(DeviceEvent other) : this() {
      channelID_ = other.channelID_;
      deviceID_ = other.deviceID_;
      timestamp_ = other.timestamp_;
      line_ = other.line_;
      eventType_ = other.eventType_;
      channelLength_ = other.channelLength_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceEvent Clone() {
      return new DeviceEvent(this);
    }

    /// <summary>Field number for the "ChannelID" field.</summary>
    public const int ChannelIDFieldNumber = 1;
    private int channelID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChannelID {
      get { return channelID_; }
      set {
        channelID_ = value;
      }
    }

    /// <summary>Field number for the "DeviceID" field.</summary>
    public const int DeviceIDFieldNumber = 2;
    private string deviceID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Line" field.</summary>
    public const int LineFieldNumber = 4;
    private string line_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Line {
      get { return line_; }
      set {
        line_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 5;
    private global::DTSSDK.Model.FiberState eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTSSDK.Model.FiberState EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "ChannelLength" field.</summary>
    public const int ChannelLengthFieldNumber = 6;
    private float channelLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChannelLength {
      get { return channelLength_; }
      set {
        channelLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelID != other.ChannelID) return false;
      if (DeviceID != other.DeviceID) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Line != other.Line) return false;
      if (EventType != other.EventType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChannelLength, other.ChannelLength)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelID != 0) hash ^= ChannelID.GetHashCode();
      if (DeviceID.Length != 0) hash ^= DeviceID.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Line.Length != 0) hash ^= Line.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (ChannelLength != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChannelLength);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChannelID);
      }
      if (DeviceID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceID);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (Line.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Line);
      }
      if (EventType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) EventType);
      }
      if (ChannelLength != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ChannelLength);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelID);
      }
      if (DeviceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceID);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Line.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Line);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (ChannelLength != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceEvent other) {
      if (other == null) {
        return;
      }
      if (other.ChannelID != 0) {
        ChannelID = other.ChannelID;
      }
      if (other.DeviceID.Length != 0) {
        DeviceID = other.DeviceID;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Line.Length != 0) {
        Line = other.Line;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.ChannelLength != 0F) {
        ChannelLength = other.ChannelLength;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelID = input.ReadInt32();
            break;
          }
          case 18: {
            DeviceID = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 34: {
            Line = input.ReadString();
            break;
          }
          case 40: {
            EventType = (global::DTSSDK.Model.FiberState) input.ReadEnum();
            break;
          }
          case 53: {
            ChannelLength = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///防区
  /// </summary>
  public sealed partial class DefenceZone : pb::IMessage<DefenceZone> {
    private static readonly pb::MessageParser<DefenceZone> _parser = new pb::MessageParser<DefenceZone>(() => new DefenceZone());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefenceZone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefenceZone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefenceZone(DefenceZone other) : this() {
      iD_ = other.iD_;
      channelID_ = other.channelID_;
      zoneName_ = other.zoneName_;
      start_ = other.start_;
      finish_ = other.finish_;
      tag_ = other.tag_;
      alarmType_ = other.alarmType_;
      alarmLoc_ = other.alarmLoc_;
      maxTemperature_ = other.maxTemperature_;
      minTemperature_ = other.minTemperature_;
      averageTemperature_ = other.averageTemperature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefenceZone Clone() {
      return new DefenceZone(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "ChannelID" field.</summary>
    public const int ChannelIDFieldNumber = 2;
    private int channelID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChannelID {
      get { return channelID_; }
      set {
        channelID_ = value;
      }
    }

    /// <summary>Field number for the "ZoneName" field.</summary>
    public const int ZoneNameFieldNumber = 3;
    private string zoneName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneName {
      get { return zoneName_; }
      set {
        zoneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 4;
    private float start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Finish" field.</summary>
    public const int FinishFieldNumber = 5;
    private float finish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Finish {
      get { return finish_; }
      set {
        finish_ = value;
      }
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 6;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AlarmType" field.</summary>
    public const int AlarmTypeFieldNumber = 7;
    private global::DTSSDK.Model.DefenceAreaState alarmType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTSSDK.Model.DefenceAreaState AlarmType {
      get { return alarmType_; }
      set {
        alarmType_ = value;
      }
    }

    /// <summary>Field number for the "AlarmLoc" field.</summary>
    public const int AlarmLocFieldNumber = 8;
    private float alarmLoc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AlarmLoc {
      get { return alarmLoc_; }
      set {
        alarmLoc_ = value;
      }
    }

    /// <summary>Field number for the "MaxTemperature" field.</summary>
    public const int MaxTemperatureFieldNumber = 9;
    private float maxTemperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxTemperature {
      get { return maxTemperature_; }
      set {
        maxTemperature_ = value;
      }
    }

    /// <summary>Field number for the "MinTemperature" field.</summary>
    public const int MinTemperatureFieldNumber = 10;
    private float minTemperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinTemperature {
      get { return minTemperature_; }
      set {
        minTemperature_ = value;
      }
    }

    /// <summary>Field number for the "AverageTemperature" field.</summary>
    public const int AverageTemperatureFieldNumber = 11;
    private float averageTemperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AverageTemperature {
      get { return averageTemperature_; }
      set {
        averageTemperature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefenceZone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefenceZone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (ChannelID != other.ChannelID) return false;
      if (ZoneName != other.ZoneName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Start, other.Start)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Finish, other.Finish)) return false;
      if (Tag != other.Tag) return false;
      if (AlarmType != other.AlarmType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AlarmLoc, other.AlarmLoc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxTemperature, other.MaxTemperature)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinTemperature, other.MinTemperature)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AverageTemperature, other.AverageTemperature)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (ChannelID != 0) hash ^= ChannelID.GetHashCode();
      if (ZoneName.Length != 0) hash ^= ZoneName.GetHashCode();
      if (Start != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Start);
      if (Finish != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Finish);
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (AlarmType != 0) hash ^= AlarmType.GetHashCode();
      if (AlarmLoc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AlarmLoc);
      if (MaxTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxTemperature);
      if (MinTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinTemperature);
      if (AverageTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AverageTemperature);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (ChannelID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChannelID);
      }
      if (ZoneName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ZoneName);
      }
      if (Start != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Start);
      }
      if (Finish != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Finish);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Tag);
      }
      if (AlarmType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) AlarmType);
      }
      if (AlarmLoc != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(AlarmLoc);
      }
      if (MaxTemperature != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(MaxTemperature);
      }
      if (MinTemperature != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MinTemperature);
      }
      if (AverageTemperature != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(AverageTemperature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (ChannelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelID);
      }
      if (ZoneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneName);
      }
      if (Start != 0F) {
        size += 1 + 4;
      }
      if (Finish != 0F) {
        size += 1 + 4;
      }
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (AlarmType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AlarmType);
      }
      if (AlarmLoc != 0F) {
        size += 1 + 4;
      }
      if (MaxTemperature != 0F) {
        size += 1 + 4;
      }
      if (MinTemperature != 0F) {
        size += 1 + 4;
      }
      if (AverageTemperature != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefenceZone other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.ChannelID != 0) {
        ChannelID = other.ChannelID;
      }
      if (other.ZoneName.Length != 0) {
        ZoneName = other.ZoneName;
      }
      if (other.Start != 0F) {
        Start = other.Start;
      }
      if (other.Finish != 0F) {
        Finish = other.Finish;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.AlarmType != 0) {
        AlarmType = other.AlarmType;
      }
      if (other.AlarmLoc != 0F) {
        AlarmLoc = other.AlarmLoc;
      }
      if (other.MaxTemperature != 0F) {
        MaxTemperature = other.MaxTemperature;
      }
      if (other.MinTemperature != 0F) {
        MinTemperature = other.MinTemperature;
      }
      if (other.AverageTemperature != 0F) {
        AverageTemperature = other.AverageTemperature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            ChannelID = input.ReadInt32();
            break;
          }
          case 26: {
            ZoneName = input.ReadString();
            break;
          }
          case 37: {
            Start = input.ReadFloat();
            break;
          }
          case 45: {
            Finish = input.ReadFloat();
            break;
          }
          case 50: {
            Tag = input.ReadString();
            break;
          }
          case 56: {
            AlarmType = (global::DTSSDK.Model.DefenceAreaState) input.ReadEnum();
            break;
          }
          case 69: {
            AlarmLoc = input.ReadFloat();
            break;
          }
          case 77: {
            MaxTemperature = input.ReadFloat();
            break;
          }
          case 85: {
            MinTemperature = input.ReadFloat();
            break;
          }
          case 93: {
            AverageTemperature = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置设备请求
  /// </summary>
  public sealed partial class SetDeviceRequest : pb::IMessage<SetDeviceRequest> {
    private static readonly pb::MessageParser<SetDeviceRequest> _parser = new pb::MessageParser<SetDeviceRequest>(() => new SetDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceRequest(SetDeviceRequest other) : this() {
      zoneTempNotifyEnable_ = other.zoneTempNotifyEnable_;
      zoneAlarmNotifyEnable_ = other.zoneAlarmNotifyEnable_;
      fiberStatusNotifyEnable_ = other.fiberStatusNotifyEnable_;
      tempSignalNotifyEnable_ = other.tempSignalNotifyEnable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceRequest Clone() {
      return new SetDeviceRequest(this);
    }

    /// <summary>Field number for the "ZoneTempNotifyEnable" field.</summary>
    public const int ZoneTempNotifyEnableFieldNumber = 1;
    private bool zoneTempNotifyEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ZoneTempNotifyEnable {
      get { return zoneTempNotifyEnable_; }
      set {
        zoneTempNotifyEnable_ = value;
      }
    }

    /// <summary>Field number for the "ZoneAlarmNotifyEnable" field.</summary>
    public const int ZoneAlarmNotifyEnableFieldNumber = 2;
    private bool zoneAlarmNotifyEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ZoneAlarmNotifyEnable {
      get { return zoneAlarmNotifyEnable_; }
      set {
        zoneAlarmNotifyEnable_ = value;
      }
    }

    /// <summary>Field number for the "FiberStatusNotifyEnable" field.</summary>
    public const int FiberStatusNotifyEnableFieldNumber = 3;
    private bool fiberStatusNotifyEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FiberStatusNotifyEnable {
      get { return fiberStatusNotifyEnable_; }
      set {
        fiberStatusNotifyEnable_ = value;
      }
    }

    /// <summary>Field number for the "TempSignalNotifyEnable" field.</summary>
    public const int TempSignalNotifyEnableFieldNumber = 4;
    private bool tempSignalNotifyEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TempSignalNotifyEnable {
      get { return tempSignalNotifyEnable_; }
      set {
        tempSignalNotifyEnable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZoneTempNotifyEnable != other.ZoneTempNotifyEnable) return false;
      if (ZoneAlarmNotifyEnable != other.ZoneAlarmNotifyEnable) return false;
      if (FiberStatusNotifyEnable != other.FiberStatusNotifyEnable) return false;
      if (TempSignalNotifyEnable != other.TempSignalNotifyEnable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZoneTempNotifyEnable != false) hash ^= ZoneTempNotifyEnable.GetHashCode();
      if (ZoneAlarmNotifyEnable != false) hash ^= ZoneAlarmNotifyEnable.GetHashCode();
      if (FiberStatusNotifyEnable != false) hash ^= FiberStatusNotifyEnable.GetHashCode();
      if (TempSignalNotifyEnable != false) hash ^= TempSignalNotifyEnable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneTempNotifyEnable != false) {
        output.WriteRawTag(8);
        output.WriteBool(ZoneTempNotifyEnable);
      }
      if (ZoneAlarmNotifyEnable != false) {
        output.WriteRawTag(16);
        output.WriteBool(ZoneAlarmNotifyEnable);
      }
      if (FiberStatusNotifyEnable != false) {
        output.WriteRawTag(24);
        output.WriteBool(FiberStatusNotifyEnable);
      }
      if (TempSignalNotifyEnable != false) {
        output.WriteRawTag(32);
        output.WriteBool(TempSignalNotifyEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneTempNotifyEnable != false) {
        size += 1 + 1;
      }
      if (ZoneAlarmNotifyEnable != false) {
        size += 1 + 1;
      }
      if (FiberStatusNotifyEnable != false) {
        size += 1 + 1;
      }
      if (TempSignalNotifyEnable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ZoneTempNotifyEnable != false) {
        ZoneTempNotifyEnable = other.ZoneTempNotifyEnable;
      }
      if (other.ZoneAlarmNotifyEnable != false) {
        ZoneAlarmNotifyEnable = other.ZoneAlarmNotifyEnable;
      }
      if (other.FiberStatusNotifyEnable != false) {
        FiberStatusNotifyEnable = other.FiberStatusNotifyEnable;
      }
      if (other.TempSignalNotifyEnable != false) {
        TempSignalNotifyEnable = other.TempSignalNotifyEnable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ZoneTempNotifyEnable = input.ReadBool();
            break;
          }
          case 16: {
            ZoneAlarmNotifyEnable = input.ReadBool();
            break;
          }
          case 24: {
            FiberStatusNotifyEnable = input.ReadBool();
            break;
          }
          case 32: {
            TempSignalNotifyEnable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置设备回执
  /// </summary>
  public sealed partial class SetDeviceReply : pb::IMessage<SetDeviceReply> {
    private static readonly pb::MessageParser<SetDeviceReply> _parser = new pb::MessageParser<SetDeviceReply>(() => new SetDeviceReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeviceReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceReply(SetDeviceReply other) : this() {
      success_ = other.success_;
      errMsg_ = other.errMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceReply Clone() {
      return new SetDeviceReply(this);
    }

    /// <summary>Field number for the "Success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "ErrMsg" field.</summary>
    public const int ErrMsgFieldNumber = 2;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDeviceReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeviceReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (ErrMsg != other.ErrMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeviceReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            ErrMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取所有防区
  /// </summary>
  public sealed partial class GetDefenceZoneRequest : pb::IMessage<GetDefenceZoneRequest> {
    private static readonly pb::MessageParser<GetDefenceZoneRequest> _parser = new pb::MessageParser<GetDefenceZoneRequest>(() => new GetDefenceZoneRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDefenceZoneRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDefenceZoneRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDefenceZoneRequest(GetDefenceZoneRequest other) : this() {
      channel_ = other.channel_;
      search_ = other.search_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDefenceZoneRequest Clone() {
      return new GetDefenceZoneRequest(this);
    }

    /// <summary>Field number for the "Channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "Search" field.</summary>
    public const int SearchFieldNumber = 2;
    private string search_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Search {
      get { return search_; }
      set {
        search_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDefenceZoneRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDefenceZoneRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channel != other.Channel) return false;
      if (Search != other.Search) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (Search.Length != 0) hash ^= Search.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Channel);
      }
      if (Search.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Search);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (Search.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Search);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDefenceZoneRequest other) {
      if (other == null) {
        return;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.Search.Length != 0) {
        Search = other.Search;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Channel = input.ReadInt32();
            break;
          }
          case 18: {
            Search = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取所有防区
  /// </summary>
  public sealed partial class GetDefenceZoneReply : pb::IMessage<GetDefenceZoneReply> {
    private static readonly pb::MessageParser<GetDefenceZoneReply> _parser = new pb::MessageParser<GetDefenceZoneReply>(() => new GetDefenceZoneReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDefenceZoneReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDefenceZoneReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDefenceZoneReply(GetDefenceZoneReply other) : this() {
      success_ = other.success_;
      errMsg_ = other.errMsg_;
      rows_ = other.rows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDefenceZoneReply Clone() {
      return new GetDefenceZoneReply(this);
    }

    /// <summary>Field number for the "Success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "ErrMsg" field.</summary>
    public const int ErrMsgFieldNumber = 2;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Rows" field.</summary>
    public const int RowsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DTSSDK.Model.DefenceZone> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(26, global::DTSSDK.Model.DefenceZone.Parser);
    private readonly pbc::RepeatedField<global::DTSSDK.Model.DefenceZone> rows_ = new pbc::RepeatedField<global::DTSSDK.Model.DefenceZone>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DTSSDK.Model.DefenceZone> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDefenceZoneReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDefenceZoneReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (ErrMsg != other.ErrMsg) return false;
      if(!rows_.Equals(other.rows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      hash ^= rows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMsg);
      }
      rows_.WriteTo(output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      size += rows_.CalculateSize(_repeated_rows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDefenceZoneReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      rows_.Add(other.rows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            ErrMsg = input.ReadString();
            break;
          }
          case 26: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取设备id 请求
  /// </summary>
  public sealed partial class GetDeviceIDRequest : pb::IMessage<GetDeviceIDRequest> {
    private static readonly pb::MessageParser<GetDeviceIDRequest> _parser = new pb::MessageParser<GetDeviceIDRequest>(() => new GetDeviceIDRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeviceIDRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeviceIDRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeviceIDRequest(GetDeviceIDRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeviceIDRequest Clone() {
      return new GetDeviceIDRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeviceIDRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeviceIDRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeviceIDRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///获取设备id 回执
  /// </summary>
  public sealed partial class GetDeviceIDReply : pb::IMessage<GetDeviceIDReply> {
    private static readonly pb::MessageParser<GetDeviceIDReply> _parser = new pb::MessageParser<GetDeviceIDReply>(() => new GetDeviceIDReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeviceIDReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeviceIDReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeviceIDReply(GetDeviceIDReply other) : this() {
      success_ = other.success_;
      errMsg_ = other.errMsg_;
      deviceID_ = other.deviceID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeviceIDReply Clone() {
      return new GetDeviceIDReply(this);
    }

    /// <summary>Field number for the "Success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "ErrMsg" field.</summary>
    public const int ErrMsgFieldNumber = 2;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeviceID" field.</summary>
    public const int DeviceIDFieldNumber = 3;
    private string deviceID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeviceIDReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeviceIDReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (ErrMsg != other.ErrMsg) return false;
      if (DeviceID != other.DeviceID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      if (DeviceID.Length != 0) hash ^= DeviceID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMsg);
      }
      if (DeviceID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (DeviceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeviceIDReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      if (other.DeviceID.Length != 0) {
        DeviceID = other.DeviceID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            ErrMsg = input.ReadString();
            break;
          }
          case 26: {
            DeviceID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///防区温度，广播
  /// </summary>
  public sealed partial class ZoneTempNotify : pb::IMessage<ZoneTempNotify> {
    private static readonly pb::MessageParser<ZoneTempNotify> _parser = new pb::MessageParser<ZoneTempNotify>(() => new ZoneTempNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZoneTempNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneTempNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneTempNotify(ZoneTempNotify other) : this() {
      deviceID_ = other.deviceID_;
      timestamp_ = other.timestamp_;
      zones_ = other.zones_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneTempNotify Clone() {
      return new ZoneTempNotify(this);
    }

    /// <summary>Field number for the "DeviceID" field.</summary>
    public const int DeviceIDFieldNumber = 1;
    private string deviceID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Zones" field.</summary>
    public const int ZonesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DTSSDK.Model.DefenceZone> _repeated_zones_codec
        = pb::FieldCodec.ForMessage(26, global::DTSSDK.Model.DefenceZone.Parser);
    private readonly pbc::RepeatedField<global::DTSSDK.Model.DefenceZone> zones_ = new pbc::RepeatedField<global::DTSSDK.Model.DefenceZone>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DTSSDK.Model.DefenceZone> Zones {
      get { return zones_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZoneTempNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZoneTempNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceID != other.DeviceID) return false;
      if (Timestamp != other.Timestamp) return false;
      if(!zones_.Equals(other.zones_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceID.Length != 0) hash ^= DeviceID.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= zones_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceID);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      zones_.WriteTo(output, _repeated_zones_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceID);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += zones_.CalculateSize(_repeated_zones_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZoneTempNotify other) {
      if (other == null) {
        return;
      }
      if (other.DeviceID.Length != 0) {
        DeviceID = other.DeviceID;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      zones_.Add(other.zones_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceID = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 26: {
            zones_.AddEntriesFrom(input, _repeated_zones_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///防区警报 广播
  /// </summary>
  public sealed partial class ZoneAlarmNotify : pb::IMessage<ZoneAlarmNotify> {
    private static readonly pb::MessageParser<ZoneAlarmNotify> _parser = new pb::MessageParser<ZoneAlarmNotify>(() => new ZoneAlarmNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZoneAlarmNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneAlarmNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneAlarmNotify(ZoneAlarmNotify other) : this() {
      deviceID_ = other.deviceID_;
      timestamp_ = other.timestamp_;
      zones_ = other.zones_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneAlarmNotify Clone() {
      return new ZoneAlarmNotify(this);
    }

    /// <summary>Field number for the "DeviceID" field.</summary>
    public const int DeviceIDFieldNumber = 1;
    private string deviceID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Zones" field.</summary>
    public const int ZonesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DTSSDK.Model.DefenceZone> _repeated_zones_codec
        = pb::FieldCodec.ForMessage(26, global::DTSSDK.Model.DefenceZone.Parser);
    private readonly pbc::RepeatedField<global::DTSSDK.Model.DefenceZone> zones_ = new pbc::RepeatedField<global::DTSSDK.Model.DefenceZone>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DTSSDK.Model.DefenceZone> Zones {
      get { return zones_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZoneAlarmNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZoneAlarmNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceID != other.DeviceID) return false;
      if (Timestamp != other.Timestamp) return false;
      if(!zones_.Equals(other.zones_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceID.Length != 0) hash ^= DeviceID.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= zones_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceID);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      zones_.WriteTo(output, _repeated_zones_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceID);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += zones_.CalculateSize(_repeated_zones_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZoneAlarmNotify other) {
      if (other == null) {
        return;
      }
      if (other.DeviceID.Length != 0) {
        DeviceID = other.DeviceID;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      zones_.Add(other.zones_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceID = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 26: {
            zones_.AddEntriesFrom(input, _repeated_zones_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设备状态， 广播
  /// </summary>
  public sealed partial class DeviceEventNotify : pb::IMessage<DeviceEventNotify> {
    private static readonly pb::MessageParser<DeviceEventNotify> _parser = new pb::MessageParser<DeviceEventNotify>(() => new DeviceEventNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceEventNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceEventNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceEventNotify(DeviceEventNotify other) : this() {
      channelID_ = other.channelID_;
      deviceID_ = other.deviceID_;
      timestamp_ = other.timestamp_;
      line_ = other.line_;
      eventType_ = other.eventType_;
      channelLength_ = other.channelLength_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceEventNotify Clone() {
      return new DeviceEventNotify(this);
    }

    /// <summary>Field number for the "ChannelID" field.</summary>
    public const int ChannelIDFieldNumber = 1;
    private int channelID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChannelID {
      get { return channelID_; }
      set {
        channelID_ = value;
      }
    }

    /// <summary>Field number for the "DeviceID" field.</summary>
    public const int DeviceIDFieldNumber = 2;
    private string deviceID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Line" field.</summary>
    public const int LineFieldNumber = 4;
    private string line_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Line {
      get { return line_; }
      set {
        line_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 5;
    private global::DTSSDK.Model.FiberState eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTSSDK.Model.FiberState EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "ChannelLength" field.</summary>
    public const int ChannelLengthFieldNumber = 6;
    private float channelLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChannelLength {
      get { return channelLength_; }
      set {
        channelLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceEventNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceEventNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelID != other.ChannelID) return false;
      if (DeviceID != other.DeviceID) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Line != other.Line) return false;
      if (EventType != other.EventType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChannelLength, other.ChannelLength)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelID != 0) hash ^= ChannelID.GetHashCode();
      if (DeviceID.Length != 0) hash ^= DeviceID.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Line.Length != 0) hash ^= Line.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (ChannelLength != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChannelLength);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChannelID);
      }
      if (DeviceID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceID);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (Line.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Line);
      }
      if (EventType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) EventType);
      }
      if (ChannelLength != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ChannelLength);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelID);
      }
      if (DeviceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceID);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Line.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Line);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (ChannelLength != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceEventNotify other) {
      if (other == null) {
        return;
      }
      if (other.ChannelID != 0) {
        ChannelID = other.ChannelID;
      }
      if (other.DeviceID.Length != 0) {
        DeviceID = other.DeviceID;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Line.Length != 0) {
        Line = other.Line;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.ChannelLength != 0F) {
        ChannelLength = other.ChannelLength;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelID = input.ReadInt32();
            break;
          }
          case 18: {
            DeviceID = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 34: {
            Line = input.ReadString();
            break;
          }
          case 40: {
            EventType = (global::DTSSDK.Model.FiberState) input.ReadEnum();
            break;
          }
          case 53: {
            ChannelLength = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设备状态， 广播
  /// </summary>
  public sealed partial class TempSignalNotify : pb::IMessage<TempSignalNotify> {
    private static readonly pb::MessageParser<TempSignalNotify> _parser = new pb::MessageParser<TempSignalNotify>(() => new TempSignalNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TempSignalNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TempSignalNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TempSignalNotify(TempSignalNotify other) : this() {
      deviceID_ = other.deviceID_;
      line_ = other.line_;
      channelID_ = other.channelID_;
      signal_ = other.signal_.Clone();
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TempSignalNotify Clone() {
      return new TempSignalNotify(this);
    }

    /// <summary>Field number for the "DeviceID" field.</summary>
    public const int DeviceIDFieldNumber = 1;
    private string deviceID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Line" field.</summary>
    public const int LineFieldNumber = 2;
    private string line_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Line {
      get { return line_; }
      set {
        line_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ChannelID" field.</summary>
    public const int ChannelIDFieldNumber = 3;
    private int channelID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChannelID {
      get { return channelID_; }
      set {
        channelID_ = value;
      }
    }

    /// <summary>Field number for the "Signal" field.</summary>
    public const int SignalFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_signal_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> signal_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Signal {
      get { return signal_; }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TempSignalNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TempSignalNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceID != other.DeviceID) return false;
      if (Line != other.Line) return false;
      if (ChannelID != other.ChannelID) return false;
      if(!signal_.Equals(other.signal_)) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceID.Length != 0) hash ^= DeviceID.GetHashCode();
      if (Line.Length != 0) hash ^= Line.GetHashCode();
      if (ChannelID != 0) hash ^= ChannelID.GetHashCode();
      hash ^= signal_.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceID);
      }
      if (Line.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Line);
      }
      if (ChannelID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChannelID);
      }
      signal_.WriteTo(output, _repeated_signal_codec);
      if (Timestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceID);
      }
      if (Line.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Line);
      }
      if (ChannelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelID);
      }
      size += signal_.CalculateSize(_repeated_signal_codec);
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TempSignalNotify other) {
      if (other == null) {
        return;
      }
      if (other.DeviceID.Length != 0) {
        DeviceID = other.DeviceID;
      }
      if (other.Line.Length != 0) {
        Line = other.Line;
      }
      if (other.ChannelID != 0) {
        ChannelID = other.ChannelID;
      }
      signal_.Add(other.signal_);
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceID = input.ReadString();
            break;
          }
          case 18: {
            Line = input.ReadString();
            break;
          }
          case 24: {
            ChannelID = input.ReadInt32();
            break;
          }
          case 34:
          case 37: {
            signal_.AddEntriesFrom(input, _repeated_signal_codec);
            break;
          }
          case 40: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///心跳
  /// </summary>
  public sealed partial class HeartBeat : pb::IMessage<HeartBeat> {
    private static readonly pb::MessageParser<HeartBeat> _parser = new pb::MessageParser<HeartBeat>(() => new HeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTSSDK.Model.MessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat(HeartBeat other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat Clone() {
      return new HeartBeat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeat other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
